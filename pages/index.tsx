import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import heroImage from "../public/static/heroImage.svg";

import Banner from "../components/banner";
import Card from "../components/card";

import coffeeStoresData from "../data/coffee-stores.json";
import { Key, useContext, useEffect, useState } from "react";
import { fetchCoffeeStores } from "../lib/coffee-stores";
import useTrackLocation from "../hooks/use-track-location";
import { ErrorCallback } from "typescript";
import { ACTION_TYPES, StoreContext } from "./_app";

interface getStaticPropsReturn {
  coffeeStores: any;
}

export async function getStaticProps(
  context: any
): Promise<{ props: getStaticPropsReturn }> {
  const data = await fetchCoffeeStores();
  return {
    props: { coffeeStores: data }, // will be passed to the page component as props
  };
}

export default function Home(props: getStaticPropsReturn) {
  const { handleTrackLocation, locationErrorMessage, isFindingLocation } =
    useTrackLocation();

  const { dispatch, state } = useContext(StoreContext);

  const { coffeeStores, latLong } = state;

  const [coffeeStoresError, setCoffeeStoresError] = useState<any>("");

  console.log({ state, locationErrorMessage });

  useEffect(() => {
    const getFetchedCoffeeStores = async () => {
      if (latLong) {
        try {
          const fetchedCoffeeStores = await fetchCoffeeStores(latLong, 20);
          console.log({ fetchedCoffeeStores });
          dispatch({
            type: ACTION_TYPES.SET_COFFEE_STORES,
            payload: {
              coffeeStores: fetchedCoffeeStores,
            },
          });
        } catch (error: any) {
          console.log({ error });
          setCoffeeStoresError(error.message);
        }
      }
    };
    getFetchedCoffeeStores();
  }, [latLong]);

  const handleBannerButtonClick = () => {
    console.log("button clicked");
    handleTrackLocation();
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Cafés Proximos</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Banner
          buttonText={isFindingLocation ? "Localizando" : "Veja lojas proximas"}
          handleClick={handleBannerButtonClick}
        />
        <p>
          {locationErrorMessage !== "" &&
            `Algo deu errado: ${locationErrorMessage}`}
        </p>
        <p>
          {coffeeStoresError !== "" &&
            `Algo deu errado: ${locationErrorMessage}`}
        </p>
        <div className={styles.heroImage}>
          <Image
            src={heroImage}
            alt={"imagem de mulher com café"}
            width={500}
            height={500}
          ></Image>
        </div>

        {coffeeStores.length > 0 && (
          <>
            <h2 className={styles.heading2}>Lojas de cafés proximas</h2>
            <div className={styles.cardLayout}>
              {coffeeStores.map(
                (coffeeStore: {
                  id: Key | null | undefined;
                  name: string;
                  imgUrl: string;
                }) => (
                  <Card
                    key={coffeeStore.id}
                    name={coffeeStore.name}
                    imgUrl={
                      coffeeStore.imgUrl ||
                      "https://images.unsplash.com/photo-1504753793650-d4a2b783c15e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2000&q=80"
                    }
                    href={`/coffee-store/${coffeeStore.id}`}
                  />
                )
              )}
            </div>
          </>
        )}

        {props.coffeeStores.length > 0 && (
          <>
            <h2 className={styles.heading2}>Cafeterias em Porto Alegre</h2>
            <div className={styles.cardLayout}>
              {props.coffeeStores.map(
                (coffeeStore: {
                  id: Key | null | undefined;
                  name: string;
                  imgUrl: string;
                }) => (
                  <Card
                    key={coffeeStore.id}
                    name={coffeeStore.name}
                    imgUrl={
                      coffeeStore.imgUrl ||
                      "https://images.unsplash.com/photo-1504753793650-d4a2b783c15e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2000&q=80"
                    }
                    href={`/coffee-store/${coffeeStore.id}`}
                  />
                )
              )}
            </div>
          </>
        )}
      </main>
    </div>
  );
}
